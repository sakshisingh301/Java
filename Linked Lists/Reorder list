
class Solution {
    public void reorderList(ListNode head) 
    {
        if(head == null || head.next == null)return;
        
        ListNode l1 = head; //head of the first list
        
        ListNode temp = null;
        ListNode slow = head;
        ListNode fast = head;
        
        while(fast != null && fast.next != null)
        {
            temp = slow;
            slow = slow.next;
            fast = fast.next.next;
        }
        temp.next = null;   //this will split the list
                            //temp is the tail of the first list
                            //slow is the head of the second list
                            //fast is the tail of the second list
         
        
        ListNode l2 = reverse(slow);    //reverse the list
        
        merge(l1,l2);        //merge both
    }
    1->2->3->4->5  1->2  5->4->3
    temp = null; slow = 1; fast=1;
    temp = 1; slow = 2 ; fast = 3;
    temp = 2; slow = 3; fast = 5;
    
    public ListNode reverse(ListNode node)
    {
        ListNode curr = node;
        ListNode nextNode = null;
        ListNode prevNode = null;
        
        while(curr != null)
        {
            nextNode = curr.next;
            curr.next = prevNode;
            prevNode = curr;
            curr = nextNode;
        }
        return prevNode;
    }
    
    public void merge(ListNode l1 , ListNode l2)
    {           
        //l1 = 1->2  l2 = 5->4->3
        
        1->5->2->4->3
        while(l1 != null)
        {
            ListNode l1_next = l1.next;
            ListNode l2_next = l2.next;
            
            l1.next = l2; 
            if(l1_next == null)break;
            
            l2.next = l1_next;
            l1 = l1_next;
            l2 = l2_next;
        }
    }
}

