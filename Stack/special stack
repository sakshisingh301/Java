


class MinStack {
Stack<Integer> s1=new Stack<>();
    Stack<Integer> s=new Stack<>();
    /** initialize your data structure here. */
    public MinStack() {
        
    }
    
    public void push(int x) {
         s.push(x);
	  if(s1.isEmpty())
	  {
	 s1.push(x);
	  }
	 
          if(s.peek()<s1.peek())
          {
              s1.push(s.peek());
          }
        
    }
    
    public void pop() {
        int res= s.pop();
        if(res==s1.peek())
        {
            s1.pop();
        }
        
        
    }
    
    public int top() {
        
        return s.peek();
        
    }
    
    public int getMin() {
        if(s1.isEmpty())
            return -1;
        else
        return s1.peek();
        
    }
}




SOL-2
USING LINKEDLIST 


class MinStack {
    Node head;
    class Node
    {
        int value;
        Node next;
        int min;
    }

    /** initialize your data structure here. */
    public MinStack() 
    {
        
    }
    
    public void push(int x) 
    {
        if(head == null)
        {
            head = new Node();
            head.value = x;
            head.min = x;
           // System.out.println(head.value);
        }
        else
        {  
            Node temp = new Node();
            temp.value = x;
           
            temp.min = Math.min(head.min , x);
            temp.next = head;
            head = temp; 
          
        }
        
    }
    
    public void pop() 
    {
     if(head != null)
     {
         System.out.println(head.value);
         head = head.next;
     }
    }
    
    public int top() {
        if(head != null)
        {
            return head.value;
        }
        return -1;
    }
    
    public int getMin() {
        return head.min;
        
    }
}

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(x);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */
