class Solution {
    public String frequencySort(String s) {
         ArrayList<Integer> list=new ArrayList<>();
        
       ConcurrentHashMap<Character,Integer> map=new ConcurrentHashMap<>();
         
        char [] c=s.toCharArray();
        
        for(int i=0;i<c.length;i++)
        {
            if(!map.containsKey(c[i]))
               {
                   map.put(c[i],1);
              
               }
               else
               {
                   map.put(c[i],map.get(c[i])+1);
                  
               }
        }
        t--1
        r--1
        e--2
      
        
        for (Map.Entry<Character, Integer> e : map.entrySet())
        {
            
            list.add(e.getValue());
            
        }   // list(1,1,2)
        
        
    Collections.sort(list, Collections.reverseOrder()); // list={2,1,1}
    
    
    2times a +1time r+1time t-------stringbuilder
        
        StringBuilder sb=new StringBuilder();
        
        for(int i=0;i<list.size();i++)
        {
            
       for (Map.Entry<Character, Integer> entry : map.entrySet()) // taking the value from the list and find its key in a map and then 
         {
          
            if (entry.getValue().equals(list.get(i))) 
            {
                int k=list.get(i);
                
                for(int j=0;j<k;j++)
                {
                    sb.append(entry.getKey());
                }
                map.remove(entry.getKey());
            }
        
         }
            
        }
    
        
        
             
        return sb.toString();
    }
}
