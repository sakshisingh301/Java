
import java.util.*;
public class Main
{
    static class Node
    {
        int data;
        Node right;
        Node left;
        Node(int data)
        {
            this.data=data;
            right=null;
            left=null;
        }
    }
    int index;
    Node BuildTree(int [] postorder,int[] inorder)
    {
        index=postorder.length-1;
      HashMap<Integer,Integer> hashmap=new HashMap<>();
      int p_start=0;
      int p_end=postorder.length-1;
      for(int i=0;i<inorder.length;i++)
      {
          hashmap.put(inorder[i],i);
      }
      
      return helper(p_start,p_end,hashmap,postorder,inorder);
    }
    Node helper(int p_start,int p_end,HashMap<Integer,Integer> hashmap, int [] postorder,int [] inorder)
    {
        if(p_start > p_end)
        {
        return null;
        }
        
        Node root=new Node(postorder[index--]);
       
        int pos=hashmap.get(root.data);
        
        
        root.right=helper(pos+1,p_end,hashmap,postorder,inorder);
        root.left=helper(p_start,pos-1,hashmap,postorder,inorder);
        return root;
    }
    void print(Node root)
    {
        if(root==null)
        return ;
        print(root.left);
         print(root.right);
        System.out.println(root.data);
        
        
       
        
    }
	public static void main(String[] args) {
	int [] postorder = {9,15,7,20,3};
    int [] inorder = {9,3,15,20,7};
    Main obj=new Main();
    Node root=obj.BuildTree(postorder,inorder);
    obj.print(root);
	}
}
