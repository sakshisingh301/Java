

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int[] findMode(TreeNode root) {
       ArrayList <Integer> list=new ArrayList<>();
        
        if(root==null)
        {
            int [] b=new int[list.size()];
            return b;
        }
            
        Stack<TreeNode> s=new Stack<>();
        TreeNode p=root;
        while(s.size()>0 ||p!=null)
        {
            while(p!=null)
            {
                s.push(p);
                p=p.left;
            }
           p=s.peek();
            list.add(p.val);
            s.pop();
            p=p.right;
        }
        
        Map<Integer,Integer> map=new HashMap<>();
        
        for(int i=0;i<list.size();i++)
        {
            if(!map.containsKey(list.get(i)))
            {
                map.put(list.get(i),1);
               
            }
            else
            {
                map.put(list.get(i),map.get(list.get(i))+1);
              
            }
        }
        
        
        int max=0; 
        ArrayList<Integer> list2=new ArrayList<>();
        //1---1
        //2---2
        for(Map.Entry<Integer,Integer> a:map.entrySet())
        {
            if(max<a.getValue())
            {
                max=a.getValue(); 
       
            }
            
            
        }
        for(Map.Entry<Integer,Integer> a:map.entrySet())
        {
            if(max==a.getValue())
            {
                max=a.getValue();
                
              list2.add(a.getKey());  
       
            }
            
            
        }
    
        int [] final_r=new int[list2.size()];
        for(int i=0;i<list2.size();i++)
        {
            final_r[i]=list2.get(i);
        }
        return final_r;
    }
}
