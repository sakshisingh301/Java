

class Tree {
    public static boolean isSubtree(Node T, Node S) {
        if(T==null &&S!=null)
        return false;
        if(T!=null && S==null)
        return true;
        if(T==null && S==null)
        return true;
        //boolean status=true;
       Stack<Node> s1=new Stack<>();
       Stack<Node> s2=new Stack<>();
       ArrayList<Integer> inorderT=new ArrayList<>();
       ArrayList<Integer> inorderS=new ArrayList<>();
       Node current1 =T;
        Node current2 =S;
       
       while((current1!=null||s1.size()>0))
       {
       while(current1!=null)
       {
          s1.push(current1);
          current1=current1.left;
          
       }
        current1=s1.pop();
        inorderT.add(current1.data);
        current1=current1.right;
         
       }
       while((current2!=null||s2.size()>0))
       {
       while(current2!=null)
       {
          
           s2.push(current2);
          current2=current2.left;
       }
        
         current2=s2.pop();
         inorderS.add(current2.data);
        current2=current2.right;
       }
       
       Stack<Node> s3=new Stack<>();
       Stack<Node> s4=new Stack<>();
       Node p1=S;
       Node p2=T;
       ArrayList<Integer> preorderS=new ArrayList<>();
       ArrayList<Integer> preorderT=new ArrayList<>();
       
        while(true)
        {
            while(p1!=null &&p2!=null)
            {
                preorderS.add(p1.data);
                preorderT.add(p2.data);
                s3.push(p1);
                s4.push(p2);
                p1=p1.left;
                p2=p2.left;
            }
            if(s3.isEmpty()&&s4.isEmpty())
            break;
            p1=s3.pop();
            p1=p1.right;
             p2=s4.pop();
            p2=p2.right;
        }
    
    HashSet<Integer> h1=new HashSet<>();
    HashSet<Integer> h2=new HashSet<>();
    
    for(int i=0;i<inorderT.size();i++)
    {
        if(!h1.contains(inorderT.get(i)))
        
        h1.add(inorderT.get(i));
        
    }
    for(int i=0;i<inorderS.size();i++)
    {
        if(!h1.contains(inorderS.get(i)))
        {
            
        
        return false;
        
        
        }
    }
    for(int i=0;i<preorderT.size();i++)
    {
        if(!h2.contains(preorderT.get(i)))
        
        h2.add(preorderT.get(i));
        
    }
    for(int i=0;i<preorderS.size();i++)
    {
        if(!h2.contains(preorderS.get(i)))
        {
         return false;
         
        }
        
    }
    return true;
    
    }
    
    }
