public static int getCountOfNode(Node root,int l, int h)
{
    if(root == null)
    {
        return 0;
    }
    
    Stack<Node> s = new Stack<Node>();
    
    Node curr = root;
    int count = 0;
    while(!s.isEmpty() || curr != null)
    {
        while(curr != null)
        {
            s.push(curr);
            curr = curr.left;
        }
        curr = s.pop();
        
        if(curr.data >= l && curr.data <= h)
        {
            count++;
        }
        
        curr = curr.right;
    }
    return count;
    
}
================================================================================================================================================
inorder traversal of bst gives us sorted array
steps: do inorder traversal 
      iterate through the list and get the no in a given range .
      
      
      class Solution {
    public int rangeSumBST(TreeNode root, int L, int R) {
         Stack<TreeNode> s=new Stack<>();
        ArrayList<Integer> list=new ArrayList<>();
        TreeNode curr=root;
        while(curr!=null ||s.size()>0)
        {
          while(curr!=null)
          {
              s.push(curr);
              curr=curr.left; 
          }
            curr=s.peek();
            list.add(curr.val);
            s.pop();
            curr=curr.right;
            
        }
        int count=0;
        for(int i=0;i<list.size();i++)
        {
            if(list.get(i)>=L &&list.get(i)<=R)
                count++;
        }
        System.out.println(count);
      return 0;  
    }
}
