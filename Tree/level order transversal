code:
method 1:

import java.util.Queue;
import java.util.LinkedList;
public class Main
{
    static class Node
    {
        int data;
        Node left;
        Node right;
        Node(int data)
        {
            this.data=data;
            left=null;
            right=null;
        }
    }
    public void levelordertransversal(Node root)
    {
        if(root==null)
        
        return ;
        
        
        Queue<Node> queue=new LinkedList<>();
        queue.add(root);
        queue.add(null);
        while(!queue.isEmpty())
        {
        Node p=queue.poll();
        if(p!=null)
        {
            
            
            if(p.left!=null)    
            queue.add(p.left);
              if(p.right!=null)    
            queue.add(p.right);
            System.out.println(p.data);
            
        }
        
        else
        {
          if(!queue.isEmpty())
          {
              System.out.println();
              queue.add(null);
          }
        }
        }  
    }
    
    public void print(Node root)
    {
        if(root!=null)
        {
            print(root.left);
            System.out.println(root.data);
            print(root.right);
        }
    }
    
	public static void main(String[] args) {
	    Main obj=new Main();
	    Node root=new Node(1);
	    root.left=new Node(2);
	    root.right=new Node(3);
	    root.left.left=new Node(4);
	    root.left.right=new Node(5);
	   
	   obj.levelordertransversal(root);
	
	}
}


method:2


import java.util.*;
public class Main
{
    static class Node 
    {
        int data;
        Node right;
        Node left;
        Node(int data)
        {
            this.data=data;
            right=null;
            left=null;
        }
    }
    public void levelordertransversal(Node root)
    {
        if(root==null)
        return ;
        Queue<Node> queue= new LinkedList<>();
        queue.add(root);
        while(true)
        {
            int nodecount=queue.size();
            if(nodecount==0)
            break;
            while(nodecount>0)
            {
                Node node=queue.peek();
                System.out.print(node.data +" ");
                queue.remove();
                if(node.left!=null)
                queue.add(node.left);
                if(node.right!=null)
                queue.add(node.right);
                nodecount--;
            }
            System.out.println();
        }
    }
  
    
	public static void main(String[] args) {
		Main obj=new Main();
		Node root=new Node(1);
		root.left=new Node(2);
		root.right=new Node(3);
		root.left.left=new Node(4);
		root.left.right=new Node(5);
		root.right.left=new Node(6);
		
		obj.levelordertransversal(root);
	}
}
LEETCODE SOL-

class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> list=new ArrayList<>();
        if(root == null) return list;
       Queue<TreeNode> queue=new LinkedList<>();
        queue.add(root);
       
        while(!queue.isEmpty())
        {
            int level = queue.size();
            List<Integer> temp = new ArrayList<>();
            for(int i = 0 ; i < level ; i++)
            {
                root = queue.poll();
                temp.add(root.val);
                  if(root.left!=null)
                    queue.add(root.left);
                if(root.right!=null)
                    queue.add(root.right); 
            }   
            list.add(temp);
        }
        
       return list;
    }
    
   
}
