Given a binary tree, return the zigzag level order traversal of its nodes' values. (ie, from left to right, then right to left for the next level and alternate between).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its zigzag level order traversal as:
[
  [3],
  [9,20],
  [7,15]
]







/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
       List<List<Integer>> result=new ArrayList<List<Integer>>(); 
        if(root==null)
            return result;
        Stack<TreeNode> s1=new Stack<>();
        Stack<TreeNode> s2=new Stack<>();
        s1.push(root);
        while(!s1.isEmpty()||!s2.isEmpty())
        {
            List<Integer> list=new ArrayList<>();
            if(!s1.isEmpty())
            {
                while(!s1.isEmpty())
                {
                    TreeNode p=s1.pop();
                    list.add(p.val);
                    if(p.right!=null)
                    s2.push(p.right);
                    if(p.left!=null)
                        s2.push(p.left);
                    

                    
                }
            }
            else
            {
              while(!s2.isEmpty())
                {
                    TreeNode p=s2.pop();
                    list.add(p.val);
                  if(p.left!=null)
                    s1.push(p.left);
                  if(p.right!=null)
                    s1.push(p.right);
                    
                    
                    
                }   
            }
            result.add(list);
        }
        return result;
    }
}
