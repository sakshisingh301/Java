we can also do it normally we do in case of binary tree but here we are using property of binary search by limiting the work space 




/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */

class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        
        if(root==null)
            return null;
        if(p.val>root.val && q.val>root.val) // if p and q are greater than the root element then no need to search in left subtree.
            return lowestCommonAncestor(root.right,p,q);
        if(p.val<root.val && q.val<root.val) // if p and q are less than root node then no need to search in right subtree hence search space is only confined to left subtree 
           return lowestCommonAncestor(root.left,p,q);
       return root;
        
    }
}
