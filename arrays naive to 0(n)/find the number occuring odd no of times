naive solution 

take two loops the count the number if it is odd then return it 

time complexity:0(n2)
space complexity:0(1)


import java.util.*;
public class Main
{
	public static void main(String[] args) {
	int [] a={1,2,3,2,3,1,3};
	
	int i;
	for( i=0;i<a.length;i++)
	{
	    int count=0;
	    for(int j=0;j<a.length;j++)
	    {
	        if(a[i]==a[j])
	        count++;
	    }
	    	if(count%2!=0)
	        {
	        System.out.println(a[i]);
	        break;
	        }
	    
	}

	
	}
}
=============================================================================================================

using hashmap
time complexity:0(n)
space complexity:0(n)



import java.util.*;
public class Main
{
	public static void main(String[] args) {
	int [] a={6, 7, 2, 7, 6, 2, 6};
	
	HashMap<Integer,Integer> map=new HashMap<>();
	for(int i=0;i<a.length;i++)
	{
	    if(!map.containsKey(a[i]))
	    map.put(a[i],1);
	    else 
	    map.put(a[i],map.get(a[i])+1);
	}
	for(int x:map.keySet())
	{
	    if(map.get(x)%2!=0)
	    {
	        System.out.println(x);
	    }
	}

	
	}
}
==============================================================================================================================

using XOR:


import java.util.*;
public class Main
{
	public static void main(String[] args) {
	int [] a={6, 7, 2, 7, 6, 2, 6};
	
	int res=0;
	for(int i=0;i<a.length;i++)
	{
	    res=res ^ a[i];
	}

	System.out.println(res);
	}
}
