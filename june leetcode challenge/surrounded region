


class Solution {
    public void solve(char[][] board) {
        
        if(board.length == 0 || board == null)
        {
            return;
        }
        for(int i = 0 ; i < board.length ; i++)
        {
            if(board[i][0] == 'O') //left boundary
            {
                dfs(board , i , 0);
            }
            if(board[i][board[0].length-1] == 'O') //right b
            {
                dfs(board , i , board[0].length-1);
            }
        }
        
        for(int j = 0 ; j < board[0].length ; j++)
        {
            if(board[0][j] == 'O') // top boundary
            {
                dfs(board , 0 , j);
            }
            if(board[board.length-1][j] == 'O') //bottom boundary
            {
                dfs(board , board.length-1 , j);
            }
        }
        
        for(int i = 0 ; i < board.length ; i++)
        {
            for(int j = 0 ; j < board[0].length ; j++)
            {
                if(board[i][j] == 'O')
                {
                    board[i][j] = 'X';
                }
                if(board[i][j] == 'S')
                {
                    board[i][j] = 'O';
                }
            }
        }
    }
    
    void dfs(char[][] board , int i , int j)
    {
        if(i < 0 || j < 0 || i >= board.length || j >= board[0].length || board[i][j] != 'O')return;
        
        board[i][j] = 'S';
        
        dfs(board , i+1 , j);
        dfs(board , i-1 , j);
        dfs(board , i , j+1);
        dfs(board , i , j-1);
    }
}
