time complexity: 0(n2)
space complexity:0(1);

class Solution {
    public int maxArea(int[] height) {
        int max_area=0;
        for(int i=0;i<height.length;i++)
        {
            for(int j=height.length-1;j>=0;j--)
            {
                int diff=Math.abs(j-i);
               
                int area=diff*Math.min(height[j],height[i]);
                if(area>max_area)
                {
                  max_area=area;   
                }
                   
            }
        }
        return max_area;
    }
}


optimised solution 0(n)
two pointer


class Solution {
    public int maxArea(int[] height) {
        int start=0;
        int end=height.length-1;
        int max=0;
        while(start<end)
        {
            if(height[start]<height[end])
            {
              int area=(end-start)*Math.min(height[start],height[end]);
               max=Math.max(max,area);
            start++;   
            }
             else if(height[start]>height[end])
             {
            int area=(end-start)*Math.min(height[start],height[end]);
              max=Math.max(max,area);
            end--;
             }
            else
            {
             int area=(end-start)*Math.min(height[start],height[end]);
             max=Math.max(max,area);
            start++;
                end--;
            }
        }
       return max; 
    }
}
