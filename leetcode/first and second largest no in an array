time complexity: 0(n)

public class HelloWorld{

     public static void main(String []args){
       

		int [] a={ 3,5,1,8,9,10,11,12};
		int max1=a[0];
		int max2=a[0];
		for(int i=0;i<a.length;i++)//n
		{
		    if(a[i]>max1)
		    max1=a[i];
		    
		}
		for(int i=0;i<a.length;i++)//n
		{
		    if(a[i]>max2 && a[i]<max1)
		    max2=a[i];
		}
		System.out.println("Max : "+max1);
		System.out.println("Max : "+max2);
	}
}

time complexity: 0(n+klogn);
space complexity: 0(n)


import java.util.*;
public class HelloWorld{

     public static void main(String []args){
       int [] a ={8,5,1,3,9,11,3};
       int k=2;
	PriorityQueue<Integer> max_heap = new PriorityQueue<Integer>(Collections.reverseOrder());
	for(int i=0;i<a.length;i++)
	{
	    max_heap.offer(a[i]);
	}
	while(k!=1)
	{
	  max_heap.poll();
	  k--;
	}
	System.out.println(max_heap.peek());
     }
}
